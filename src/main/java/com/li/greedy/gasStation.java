package com.li.greedy;

/**
 * @Author: li wei kai
 * @Date: 2022/03/16/17:25
 * @Description:leetcode T134 题目：加油站
 题目描述：
在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。你有一辆油箱容量无限的的汽车，
从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。
给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则保证它是唯一 的。

示例 1:
   输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
   输出: 3
   解释:
    从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
    开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
    开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
    开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
    开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
    开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
    因此，3 可为起始索引。
示例 2:
    输入: gas = [2,3,4], cost = [3,4,3]
    输出: -1
    解释:
      你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。
      我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油
      开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油
      开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油
      你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。
      因此，无论怎样，你都不可能绕环路行驶一周。
 */
public class gasStation {
    public static void main(String[] args) {
        int[] gas = {4,5,2,6,5,3} ;
        int[] cost = {3,2,7,3,2,9} ;
        int circuit = canCompleteCircuit(gas, cost);
        System.out.println("circuit=" + circuit);
    }
  //贪心算法局部最优：当前累加rest[j]的和curSum⼀旦⼩于0，起始位置⾄少要是j+1，因为从j开始⼀定不⾏。
  // 全局最优：找到可以跑⼀圈的起始位置。

    //⾸先如果总油量减去总消耗⼤于等于零那么⼀定可以跑完⼀圈，说明各个站点的加油站剩油量rest[i]相加⼀定
    // 是⼤于等于零的。每个加油站的剩余量 rest[i] 为 gas[i] - cost[i] 。i从0开始累加rest[i]，
    // 和记为sum，⼀旦curSum⼩于零，说明[0, i]区间都不能作为起始位置，起始位置从i+1算起，
    // 再从0计算curSum。

    //那么为什么⼀旦[i，j] 区间和为负数，起始位置就可以是j+1呢，j+1后⾯就不会出现更⼤的负数？
    //  如果出现更⼤的负数，就是更新j，那么起始位置⼜变成新的j+1了。
    //⽽且j之前出现了多少负数，j后⾯就会出现多少正数，因为耗油总和是⼤于零的（前提我们已经确定了⼀定
    //可以跑完全程）
    public static int canCompleteCircuit(int[] gas , int[] cost){
        int sum = 0 ;
        int totalSum = 0 ;
        int start = 0 ;
        for (int i = 0 ; i < gas.length ; i++){
           /* int rest = gas[i] - cost[i] ;*/
            sum += gas[i] - cost[i] ;
            totalSum += gas[i] - cost[i] ;
            //当前累加rest[i]和 sum⼀旦⼩于 0
            if (sum < 0){
                // 起始位置更新为i+1
                start = i + 1 ;
                // curSum从0开始
                sum = 0 ;
            }
        }
        // 说明怎么⾛都不可能跑⼀圈了
        if (totalSum < 0) return -1 ;
        return start ;
    }
}
